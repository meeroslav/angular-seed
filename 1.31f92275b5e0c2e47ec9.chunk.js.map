{"version":3,"sources":["./node_modules/rxjs/_esm5/operators/sample.js","./node_modules/rxjs/_esm5/observable/FromEventObservable.js","./node_modules/rxjs/_esm5/observable/fromEvent.js","./node_modules/rxjs/_esm5/ReplaySubject.js","./node_modules/rxjs/_esm5/operators/publishReplay.js","./node_modules/rxjs/_esm5/add/operator/sample.js","./node_modules/rxjs/_esm5/operator/sample.js","./node_modules/rxjs/_esm5/observable/IntervalObservable.js","./node_modules/rxjs/_esm5/observable/interval.js","./node_modules/rxjs/_esm5/add/observable/interval.js","./node_modules/rxjs/_esm5/add/observable/fromEvent.js","./node_modules/ngx-type-ahead/src/typeahead.component.js","./node_modules/rxjs/_esm5/add/operator/publishReplay.js","./node_modules/rxjs/_esm5/operator/publishReplay.js","./node_modules/rxjs/_esm5/add/operator/take.js","./node_modules/rxjs/_esm5/operator/take.js","./node_modules/rxjs/_esm5/add/observable/of.js","./node_modules/rxjs/_esm5/add/operator/mergeAll.js","./node_modules/ngx-type-ahead/src/typeahead.module.js","./node_modules/ngx-type-ahead/index.js","./node_modules/rxjs/_esm5/add/operator/distinctUntilChanged.js"],"names":["_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_1__","__webpack_require__","__extends","d","b","p","hasOwnProperty","__","this","constructor","prototype","Object","create","sample","notifier","source","lift","SampleOperator","call","subscriber","sampleSubscriber","SampleSubscriber","subscription","subscribe","add","_super","apply","arguments","hasValue","_next","value","notifyNext","outerValue","innerValue","outerIndex","innerIndex","innerSub","emitValue","notifyComplete","destination","next","_OuterSubscriber__WEBPACK_IMPORTED_MODULE_0__","FromEventObservable_extends","FromEventObservable_toString","toString","FromEventObservable_FromEventObservable","FromEventObservable","sourceObj","eventName","selector","options","target","isFunction","undefined","setupSubscription","handler","unsubscribe","FromEventObservable_isNodeList","FromEventObservable_isHTMLCollection","i","len","length","addEventListener","removeEventListener","FromEventObservable_isEventTarget","source_1","on","off","FromEventObservable_isJQueryStyleEventEmitter","source_2","addListener","removeListener","FromEventObservable_isNodeStyleEventEmitter","TypeError","source_3","Subscription","_subscribe","args","_i","result","tryCatch","errorObject","error","e","Observable","__webpack_exports__","fromEvent_fromEvent","_SubjectSubscription__WEBPACK_IMPORTED_MODULE_5__","ReplaySubject","bufferSize","windowTime","scheduler","Number","POSITIVE_INFINITY","_events","_bufferSize","_windowTime","now","_getNow","push","ReplayEvent","_trimBufferThenGetEvents","closed","_util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_4__","hasError","_Subscription__WEBPACK_IMPORTED_MODULE_2__","EMPTY","isStopped","observers","_operators_observeOn__WEBPACK_IMPORTED_MODULE_3__","thrownError","complete","_scheduler_queue__WEBPACK_IMPORTED_MODULE_1__","eventsCount","spliceCount","time","Math","max","splice","_Subject__WEBPACK_IMPORTED_MODULE_0__","_multicast__WEBPACK_IMPORTED_MODULE_1__","publishReplay","selectorOrScheduler","subject","_ReplaySubject__WEBPACK_IMPORTED_MODULE_0__","operators_sample","IntervalObservable_extends","interval_interval","IntervalObservable","period","scheduler_async","isNumeric","schedule","dispatch","state","index","interval","_observable_fromEvent__WEBPACK_IMPORTED_MODULE_1__","_Observable__WEBPACK_IMPORTED_MODULE_0__","fromEvent","defineProperty","exports","core_1","Observable_1","forms_1","KEY_UP","KEY_DOWN","sanitizeString","text","toLowerCase","normalize","replace","trim","TypeaheadComponent","elementRef","renderer","suggestions","nameField","idField","custom","multi","complex","placeholder","valueChange","EventEmitter","isDisabled","isExpanded","dropDownClass","matches","values","callbackQueue","_settings","suggestionsLimit","typeDelay","noMatchesText","tagClass","tagRemoveIconClass","dropdownMenuClass","dropdownMenuExpandedClass","dropdownMenuItemClass","dropdownToggleClass","_inputChangeEvent","_removeInProgress","onChange","_","onTouched","get","set","assign","enumerable","configurable","focusOutHandler","event","relatedTarget","nativeElement","parentElement","toggleDropdown","_input","emit","hasMatch","focus","ngOnInit","suggestionsInit","refCount","mergeAll","of","ngOnChanges","changes","firstChange","allMatchesSubscription","matchesSubscription","suggestion$","_this","debounceTime","settings","mergeMap","normalizedValue","filteredSuggestions$","filter","filterSuggestion","take","toArray","allMatches","shift","ngAfterViewInit","querySelector","_value","callback","extractNameById","ngOnDestroy","writeValue","handleInputChange","stopPropagation","handleInput","includes","type","key","setValue","removeValue","handleButton","MouseEvent","nextElementSibling","previousElementSibling","parentNode","scrollTop","offsetTop","collapseMenu","concat","map","extractIdentifier","bind","extractName","indexOf","slice","parseObjectById","val","document","event_1","createEvent","initEvent","dispatchEvent","fireEvent","setDisabledState","setProperty","registerOnChange","fn","registerOnTouched","some","element","sanitizedValue","id","match","sanitizedValue_1","find","item","Error","decorators","Component","styles","template","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","ctorParameters","ElementRef","Inject","Renderer2","propDecorators","Input","itemTemplate","multiBinding","HostBinding","disabledBinding","Output","HostListener","operators_publishReplay","count","operators_take","_observable_of__WEBPACK_IMPORTED_MODULE_1__","_operator_mergeAll__WEBPACK_IMPORTED_MODULE_1__","typeahead_component_1","common_1","TypeaheadModule","NgModule","imports","CommonModule","declarations","__export","m","_operator_distinctUntilChanged__WEBPACK_IMPORTED_MODULE_1__","distinctUntilChanged"],"mappings":"sIAAAA,EAAAC,EAAA,IACAC,EAAA,SAAAC,EAAAC,GACA,QAAAC,KAAAD,EACAA,EAAAE,eAAAD,KACAF,EAAAE,GAAAD,EAAAC,IACA,SAAAE,IAAmBC,KAAAC,YAAAN,EACnBA,EAAAO,UAAA,OAAAN,EAAAO,OAAAC,OAAAR,IAAAG,EAAAG,UAAAN,EAAAM,UAAA,IAAAH,IAsCA,SAAAM,EAAAC,GACA,gBAAAC,GAA8B,OAAAA,EAAAC,KAAA,IAAAC,EAAAH,KAE9B,IAAAG,EAAA,WACA,SAAAA,EAAAH,GACAN,KAAAM,WAQA,OANAG,EAAAP,UAAAQ,KAAA,SAAAC,EAAAJ,GACA,IAAAK,EAAA,IAAAC,EAAAF,GACAG,EAAAP,EAAAQ,UAAAH,GAEA,OADAE,EAAAE,IAAAb,OAAAX,EAAA,EAAAW,CAAAS,EAAAZ,KAAAM,WACAQ,GAEAL,EAVA,GAiBAI,EAAA,SAAAI,GAEA,SAAAJ,IACAI,EAAAC,MAAAlB,KAAAmB,WACAnB,KAAAoB,UAAA,EAkBA,OArBA1B,EAAAmB,EAAAI,GAKAJ,EAAAX,UAAAmB,MAAA,SAAAC,GACAtB,KAAAsB,QACAtB,KAAAoB,UAAA,GAEAP,EAAAX,UAAAqB,WAAA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA5B,KAAA6B,aAEAhB,EAAAX,UAAA4B,eAAA,WACA9B,KAAA6B,aAEAhB,EAAAX,UAAA2B,UAAA,WACA7B,KAAAoB,WACApB,KAAAoB,UAAA,EACApB,KAAA+B,YAAAC,KAAAhC,KAAAsB,SAGAT,EAtBA,CAuBCoB,EAAA,uFCtFDC,EAAA,SAAAvC,EAAAC,GACA,QAAAC,KAAAD,EACAA,EAAAE,eAAAD,KACAF,EAAAE,GAAAD,EAAAC,IACA,SAAAE,IAAmBC,KAAAC,YAAAN,EACnBA,EAAAO,UAAA,OAAAN,EAAAO,OAAAC,OAAAR,IAAAG,EAAAG,UAAAN,EAAAM,UAAA,IAAAH,IAOAoC,EAAAhC,OAAAD,UAAAkC,SAqBA,IAAAC,EAAA,SAAApB,GAEA,SAAAqB,EAAAC,EAAAC,EAAAC,EAAAC,GACAzB,EAAAP,KAAAV,MACAA,KAAAuC,YACAvC,KAAAwC,YACAxC,KAAAyC,WACAzC,KAAA0C,UA6KA,OAnLAR,EAAAI,EAAArB,GA6HAqB,EAAAlC,OAAA,SAAAuC,EAAAH,EAAAE,EAAAD,GAKA,OAJAtC,OAAAyC,EAAA,EAAAzC,CAAAuC,KACAD,EAAAC,EACAA,OAAAG,GAEA,IAAAP,EAAAK,EAAAH,EAAAC,EAAAC,IAEAJ,EAAAQ,kBAAA,SAAAP,EAAAC,EAAAO,EAAApC,EAAA+B,GACA,IAAAM,EACA,GArJA,SAAAT,GACA,QAAAA,GAAA,sBAAAJ,EAAAzB,KAAA6B,GAoJAU,CAAAV,IAlJA,SAAAA,GACA,QAAAA,GAAA,4BAAAJ,EAAAzB,KAAA6B,GAiJAW,CAAAX,GACA,QAAAY,EAAA,EAAAC,EAAAb,EAAAc,OAAmDF,EAAAC,EAASD,IAC5Db,EAAAQ,kBAAAP,EAAAY,GAAAX,EAAAO,EAAApC,EAAA+B,QAGA,GApJA,SAAAH,GACA,QAAAA,GAAA,mBAAAA,EAAAe,kBAAA,mBAAAf,EAAAgB,oBAmJAC,CAAAjB,GAAA,CACA,IAAAkB,EAAAlB,EACAA,EAAAe,iBAAAd,EAAAO,EAAAL,GACAM,EAAA,WAAuC,OAAAS,EAAAF,oBAAAf,EAAAO,EAAAL,SAEvC,GAlKA,SAAAH,GACA,QAAAA,GAAA,mBAAAA,EAAAmB,IAAA,mBAAAnB,EAAAoB,IAiKAC,CAAArB,GAAA,CACA,IAAAsB,EAAAtB,EACAA,EAAAmB,GAAAlB,EAAAO,GACAC,EAAA,WAAuC,OAAAa,EAAAF,IAAAnB,EAAAO,QAEvC,KA1KA,SAAAR,GACA,QAAAA,GAAA,mBAAAA,EAAAuB,aAAA,mBAAAvB,EAAAwB,eAyKAC,CAAAzB,GAMA,UAAA0B,UAAA,wBALA,IAAAC,EAAA3B,EACAA,EAAAuB,YAAAtB,EAAAO,GACAC,EAAA,WAAuC,OAAAkB,EAAAH,eAAAvB,EAAAO,IAKvCpC,EAAAK,IAAA,IAAAmD,EAAA,EAAAnB,KAEAV,EAAApC,UAAAkE,WAAA,SAAAzD,GACA,IAAA4B,EAAAvC,KAAAuC,UACAC,EAAAxC,KAAAwC,UACAE,EAAA1C,KAAA0C,QACAD,EAAAzC,KAAAyC,SACAM,EAAAN,EAAA,WAEA,IADA,IAAA4B,KACAC,EAAA,EAA4BA,EAAAnD,UAAAkC,OAAuBiB,IACnDD,EAAAC,EAAA,GAAAnD,UAAAmD,GAEA,IAAAC,EAAApE,OAAAqE,EAAA,EAAArE,CAAAsC,GAAAvB,WAAA,EAAAmD,GACAE,IAAAE,EAAA,EACA9D,EAAA+D,MAAAD,EAAA,EAAAE,GAGAhE,EAAAqB,KAAAuC,IAES,SAAAI,GAAiB,OAAAhE,EAAAqB,KAAA2C,IAC1BrC,EAAAQ,kBAAAP,EAAAC,EAAAO,EAAApC,EAAA+B,IAEAJ,EApLA,CAqLCsC,EAAA,YCvNDnF,EAAAE,EAAAkF,EAAA,8BAAAC,IAEA,IAAAA,EAAAzC,EAAAjC,uHCFA2E,EAAAtF,EAAA,KACAC,EAAA,SAAAC,EAAAC,GACA,QAAAC,KAAAD,EACAA,EAAAE,eAAAD,KACAF,EAAAE,GAAAD,EAAAC,IACA,SAAAE,IAAmBC,KAAAC,YAAAN,EACnBA,EAAAO,UAAA,OAAAN,EAAAO,OAAAC,OAAAR,IAAAG,EAAAG,UAAAN,EAAAM,UAAA,IAAAH,IAWAiF,EAAA,SAAA/D,GAEA,SAAA+D,EAAAC,EAAAC,EAAAC,QACA,IAAAF,IACAA,EAAAG,OAAAC,wBAEA,IAAAH,IACAA,EAAAE,OAAAC,mBAEApE,EAAAP,KAAAV,MACAA,KAAAmF,YACAnF,KAAAsF,WACAtF,KAAAuF,YAAAN,EAAA,IAAAA,EACAjF,KAAAwF,YAAAN,EAAA,IAAAA,EAmEA,OA/EAxF,EAAAsF,EAAA/D,GAcA+D,EAAA9E,UAAA8B,KAAA,SAAAV,GACA,IAAAmE,EAAAzF,KAAA0F,UACA1F,KAAAsF,QAAAK,KAAA,IAAAC,EAAAH,EAAAnE,IACAtB,KAAA6F,2BACA5E,EAAAf,UAAA8B,KAAAtB,KAAAV,KAAAsB,IAEA0D,EAAA9E,UAAAkE,WAAA,SAAAzD,GACA,IAEAG,EAFAwE,EAAAtF,KAAA6F,2BACAV,EAAAnF,KAAAmF,UAEA,GAAAnF,KAAA8F,OACA,UAAAC,EAAA,EAEA/F,KAAAgG,SACAlF,EAAAmF,EAAA,EAAAC,MAEAlG,KAAAmG,UACArF,EAAAmF,EAAA,EAAAC,OAGAlG,KAAAoG,UAAAT,KAAAhF,GACAG,EAAA,IAAAiE,EAAA,EAAA/E,KAAAW,IAEAwE,GACAxE,EAAAK,IAAAL,EAAA,IAAA0F,EAAA,EAAA1F,EAAAwE,IAGA,IADA,IAAA/B,EAAAkC,EAAAjC,OACAF,EAAA,EAAuBA,EAAAC,IAAAzC,EAAAmF,OAA+B3C,IACtDxC,EAAAqB,KAAAsD,EAAAnC,GAAA7B,OAQA,OANAtB,KAAAgG,SACArF,EAAA+D,MAAA1E,KAAAsG,aAEAtG,KAAAmG,WACAxF,EAAA4F,WAEAzF,GAEAkE,EAAA9E,UAAAwF,QAAA,WACA,OAAA1F,KAAAmF,WAAAqB,EAAA,GAAAf,OAEAT,EAAA9E,UAAA2F,yBAAA,WAUA,IATA,IAAAJ,EAAAzF,KAAA0F,UACAH,EAAAvF,KAAAuF,YACAC,EAAAxF,KAAAwF,YACAF,EAAAtF,KAAAsF,QACAmB,EAAAnB,EAAAjC,OACAqD,EAAA,EAIAA,EAAAD,KACAhB,EAAAH,EAAAoB,GAAAC,KAAAnB,IAGAkB,IAQA,OANAD,EAAAlB,IACAmB,EAAAE,KAAAC,IAAAH,EAAAD,EAAAlB,IAEAmB,EAAA,GACApB,EAAAwB,OAAA,EAAAJ,GAEApB,GAEAN,EAhFA,CAiFC+B,EAAA,GACDnB,EAAA,WAKA,OAJA,SAAAe,EAAArF,GACAtB,KAAA2G,OACA3G,KAAAsB,SAHA,kFCnGA0F,EAAAvH,EAAA,KAIA,SAAAwH,EAAAhC,EAAAC,EAAAgC,EAAA/B,GACA+B,GAAA,mBAAAA,IACA/B,EAAA+B,GAEA,IAAAzE,EAAA,mBAAAyE,SAAArE,EACAsE,EAAA,IAAAC,EAAA,EAAAnC,EAAAC,EAAAC,GACA,gBAAA5E,GAA8B,OAAAJ,OAAA6G,EAAA,EAAA7G,CAAA,WAA+B,OAAAgH,GAAkB1E,EAAjDtC,CAAiDI,2DCP/EqE,EAAA,WAAA1E,UAAAG,OCiCA,SAAAC,GACA,OAAAH,OAAAkH,EAAA,EAAAlH,CAAAG,EAAAH,CAAAH,qECpCAsH,EAAA,SAAA3H,EAAAC,GACA,QAAAC,KAAAD,EACAA,EAAAE,eAAAD,KACAF,EAAAE,GAAAD,EAAAC,IACA,SAAAE,IAAmBC,KAAAC,YAAAN,EACnBA,EAAAO,UAAA,OAAAN,EAAAO,OAAAC,OAAAR,IAAAG,EAAAG,UAAAN,EAAAM,UAAA,IAAAH,ICJAwH,EDcA,SAAAtG,GAEA,SAAAuG,EAAAC,EAAAtC,QACA,IAAAsC,IACAA,EAAA,QAEA,IAAAtC,IACAA,EAAAuC,EAAA,GAEAzG,EAAAP,KAAAV,MACAA,KAAAyH,SACAzH,KAAAmF,cACAhF,OAAAwH,EAAA,EAAAxH,CAAAsH,MAAA,KACAzH,KAAAyH,OAAA,GAEAtC,GAAA,mBAAAA,EAAAyC,WACA5H,KAAAmF,UAAAuC,EAAA,GA8DA,OA7EAJ,EAAAE,EAAAvG,GAmDAuG,EAAApH,OAAA,SAAAqH,EAAAtC,GAOA,YANA,IAAAsC,IACAA,EAAA,QAEA,IAAAtC,IACAA,EAAAuC,EAAA,GAEA,IAAAF,EAAAC,EAAAtC,IAEAqC,EAAAK,SAAA,SAAAC,GACA,IAAAC,EAAAD,EAAAC,MAAApH,EAAAmH,EAAAnH,WAAA8G,EAAAK,EAAAL,OACA9G,EAAAqB,KAAA+F,GACApH,EAAAmF,SAGAgC,EAAAC,OAAA,EACA/H,KAAA4H,SAAAE,EAAAL,KAEAD,EAAAtH,UAAAkE,WAAA,SAAAzD,GACA,IACA8G,EAAAzH,KAAAyH,OACAtC,EAAAnF,KAAAmF,UACAxE,EAAAK,IAAAmE,EAAAyC,SAAAJ,EAAAK,SAAAJ,GACAM,MAJA,EAIApH,aAAA8G,aAGAD,EA9EA,CA+EC5C,EAAA,YC7FDxE,OCCAwE,EAAA,WAAAoD,SAAAT,+CCHAU,EAAAxI,EAAA,KAGAyI,EAAA,WAAAC,UAAAF,EAAA,4CCFA9H,OAAAiI,eAAAC,EAAA,cAA8C/G,OAAA,IAC9C,IAAAgH,EAAA7I,EAAA,GACA8I,EAAA9I,EAAA,GACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACA,IAAA+I,EAAA/I,EAAA,IACAgJ,EAAA,QACAC,EAAA,UAUAC,EAAA,SAAAC,GACA,OAAAA,EAAAC,cAAAC,UAAA,OAAAC,QAAA,uBAAAC,QAQAC,EAAA,WAMA,SAAAA,EAAAC,EAAAC,GACAnJ,KAAAkJ,aACAlJ,KAAAmJ,WAEAnJ,KAAAoJ,eAEApJ,KAAAqJ,UAAA,OAEArJ,KAAAsJ,QAAA,KAEAtJ,KAAAuJ,QAAA,EAEAvJ,KAAAwJ,OAAA,EAEAxJ,KAAAyJ,SAAA,EAEAzJ,KAAA0J,YAAA,GAEA1J,KAAA2J,YAAA,IAAArB,EAAAsB,aAEA5J,KAAA6J,YAAA,EACA7J,KAAA8J,YAAA,EACA9J,KAAA+J,cAAA,GACA/J,KAAAgK,WAEAhK,KAAAiK,UACAjK,KAAAkK,iBAMAlK,KAAAmK,WACAC,iBAAA,GACAC,UAAA,GACAC,cAAA,mBACAC,SAAA,0BACAC,mBAAA,GACAC,kBAAA,gBACAC,0BAAA,qBACAC,sBAAA,gBACAC,oBAAA,mBAEA5K,KAAA6K,kBAAA,IAAAvC,EAAAsB,aACA5J,KAAA8K,mBAAA,EACA9K,KAAA+K,SAAA,SAAAC,KACAhL,KAAAiL,UAAA,aAocA,OAlcA9K,OAAAiI,eAAAa,EAAA/I,UAAA,YACAgL,IAAA,WACA,OAAAlL,KAAAmK,WAGAgB,IAAA,SAAA7J,GACAnB,OAAAiL,OAAApL,KAAAmK,UAAA7I,IAEA+J,YAAA,EACAC,cAAA,IAEAnL,OAAAiI,eAAAa,EAAA/I,UAAA,gBAEAgL,IAAA,WAA0B,OAAAlL,KAAAwJ,OAC1B6B,YAAA,EACAC,cAAA,IAEAnL,OAAAiI,eAAAa,EAAA/I,UAAA,mBACAgL,IAAA,WAA0B,OAAAlL,KAAA6J,YAAA,MAC1BwB,YAAA,EACAC,cAAA,IAEArC,EAAA/I,UAAAqL,gBAAA,SAAAC,GACA,IAAAxL,KAAA6J,WAGA,IAAA2B,EAAAC,eAEAD,EAAAC,gBAAAzL,KAAAkJ,WAAAwC,eACAF,EAAAC,cAAAE,gBAAA3L,KAAAkJ,WAAAwC,eACAF,EAAAC,cAAAE,8BAAA3L,KAAAkJ,WAAAwC,cAJA,CAeA,GAFA1L,KAAA4L,gBAAA,GAEA5L,KAAAwJ,MAGA,OAFAxJ,KAAA6L,OAAAvK,MAAA,UACAtB,KAAA6K,kBAAAiB,KAAA,IAIA9L,KAAAuJ,SAAAvJ,KAAAyJ,UACAzJ,KAAA6L,OAAAvK,MAAAtB,KAAA6L,OAAAvK,MAAA0H,OAEAhJ,KAAA+L,SAAA/L,KAAA6L,OAAAvK,SACAtB,KAAA6L,OAAAvK,MAAAtB,KAAAsB,MAAA,KACAtB,KAAA6K,kBAAAiB,KAAA,WApBAN,EAAA7I,SAAA3C,KAAA6L,QAAAL,EAAAC,gBAAAzL,KAAAkJ,WAAAwC,eACA1L,KAAA6L,OAAAG,SA0BA/C,EAAA/I,UAAA+L,SAAA,WACAjM,KAAAkM,gBAAAlM,KAAAoJ,uBAAAb,EAAA3D,WACA5E,KAAAoJ,YACAnC,cAAA,GACAkF,WACAC,WAAA7D,EAAA3D,WACAyH,GAAAnL,MAAAqH,EAAA3D,WAAA5E,KAAAoJ,cACApJ,KAAA4L,gBAAA,GACA5L,KAAA6K,kBAAAiB,KAAA,KAEA7C,EAAA/I,UAAAoM,YAAA,SAAAC,GACAA,EAAAnD,cAAAmD,EAAAnD,YAAAoD,cACAxM,KAAAyM,uBAAAzJ,cACAhD,KAAA0M,oBAAA1J,cACAhD,KAAAiM,aAGAhD,EAAA/I,UAAAgM,gBAAA,SAAAS,GACA,IAAAC,EAAA5M,KACAA,KAAA0M,oBAAA1M,KAAA6K,kBACAgC,aAAA7M,KAAA8M,SAAAzC,WACA0C,SAAA,SAAAzL,GACA,IAAA0L,EAAArE,EAAArH,GACA2L,EAAAN,EAAAO,OAAAN,EAAAO,iBAAAH,IACA,OAAAJ,EAAAE,SAAA1C,iBACA6C,EAAAG,KAAAR,EAAAE,SAAA1C,kBAAAiD,UACAJ,EAAAI,YAEAtM,UAAA,SAAAiJ,GACA4C,EAAA5C,YAEAhK,KAAAyM,uBAAAE,EAAAU,UAAAtM,UAAA,SAAAqI,GAEA,IADAwD,EAAAU,WAAAlE,EACAwD,EAAA1C,cAAA7G,QAEAuJ,EAAA1C,cAAAqD,QAAArM,MAAA0L,GACAA,EAAA/B,kBAAAiB,KAAA,OAOA7C,EAAA/I,UAAAsN,gBAAA,WACA,IAAAZ,EAAA5M,KAGA,GADAA,KAAA6L,OAAA7L,KAAAkJ,WAAAwC,cAAA+B,cAAA,UACAzN,KAAAwJ,OAAAxJ,KAAA0N,OAAA,CACA,IAAAC,EAAA,WACAf,EAAAf,OAAAvK,MAAAsL,EAAAnD,QACAmD,EAAAgB,gBAAAhB,EAAAc,QACAd,EAAAc,QAEA1N,KAAAsN,aAAAtN,KAAAyJ,QACAkE,EAAAzM,MAAAlB,MAGAA,KAAAkK,cAAAvE,KAAAgI,KAOA1E,EAAA/I,UAAA2N,YAAA,WACA7N,KAAAyM,uBAAAzJ,cACAhD,KAAA0M,oBAAA1J,eAEA7C,OAAAiI,eAAAa,EAAA/I,UAAA,SAKAgL,IAAA,WACA,OAAAlL,KAAA0N,QAMAvC,IAAA,SAAA7J,GACAA,IAAAtB,KAAA0N,QAGA1N,KAAA8N,WAAAxM,IAEA+J,YAAA,EACAC,cAAA,IAMArC,EAAA/I,UAAA6N,kBAAA,SAAAvC,GAGAA,EAAAwC,mBAMA/E,EAAA/I,UAAA+N,YAAA,SAAAzC,GACA,IAAA7I,EAAA6I,EAAA7I,QAEA+F,EAAAD,GAAAyF,SAAA1C,EAAA2C,OA1OA,WA0OA3C,EAAA4C,IACApO,KAAA4L,gBAAA,GAIAJ,EAAA2C,OAAAzF,GAjPA,cAiPA8C,EAAA4C,KAAApO,KAAAgK,QAAA3G,OAAA,EACArD,KAAAkJ,WAAAwC,cAAA+B,cAAA,uCACAzB,SAGAhM,KAAA4L,gBAAA,GACA5L,KAAAwJ,OAAAxJ,KAAAyJ,SACA+B,EAAA2C,OAAA1F,GArPA,UAqPA+C,EAAA4C,KAAA,KAAAzL,EAAArB,QACAtB,KAAAqO,SAAA1L,EAAArB,OACAtB,KAAA4L,gBAAA,KAEAlD,EAAAD,GAAAyF,SAAA1C,EAAA2C,OAxPA,cAwPA3C,EAAA4C,MACA,KAAAzL,EAAArB,MACAkK,EAAA2C,OAAAzF,EACA1I,KAAA8K,mBAAA,EAEA9K,KAAA8K,mBACA9K,KAAAwJ,OAAAxJ,KAAAiK,OAAA5G,SACArD,KAAA8K,mBAAA,EACA9K,KAAAsO,YAAAtO,KAAAiK,OAAAjK,KAAAiK,OAAA5G,OAAA,KAIArD,KAAAyJ,UAAAzJ,KAAAwJ,OAAAgC,EAAA2C,OAAAzF,IACA1I,KAAAsB,MAAA,QAIAkK,EAAA2C,OAAA1F,IACAzI,KAAAqO,SAAA1L,EAAArB,OA3QA,UA4QAkK,EAAA4C,KAAA,KAAAzL,EAAArB,OACAtB,KAAA4L,gBAAA,IAGA5L,KAAA6K,kBAAAiB,KAAAnJ,EAAArB,SAOA2H,EAAA/I,UAAAqO,aAAA,SAAA/C,EAAAlK,GACA,IAAAqB,EAAA6I,EAAA7I,OACA,GAAA6I,aAAAgD,WAGA,OAFAxO,KAAAqO,SAAA/M,GAAA,QACAtB,KAAA6K,kBAAAiB,KAAA9L,KAAA6L,OAAAvK,OAGAkK,EAAA2C,OAAA1F,GA9RA,UA+RA+C,EAAA4C,MACApO,KAAAqO,SAAA/M,GACAtB,KAAA6K,kBAAAiB,KAAA9L,KAAA6L,OAAAvK,OACAtB,KAAA4L,gBAAA,IAnSA,WAqSAJ,EAAA4C,MACApO,KAAA6L,OAAAG,QACAhM,KAAA4L,gBAAA,MAzSA,cA6SAJ,EAAA4C,KAAAzL,EAAA8L,oBACA9L,EAAA8L,mBAAAzC,QA7SA,YA+SAR,EAAA4C,KAAAzL,EAAA+L,wBACA/L,EAAA+L,uBAAA1C,QAEArJ,EAAAgM,WAAAC,UAAAjM,EAAAkM,YAQA5F,EAAA/I,UAAAmO,SAAA,SAAA/M,EAAAwN,IACA9O,KAAAuJ,SAAAvJ,KAAAyJ,SAAAzJ,KAAA+L,SAAAzK,MAGAtB,KAAAwJ,MACAxJ,KAAAiK,OAAAiE,SAAA5M,KACAtB,KAAAsB,MAAAtB,KAAAiK,OAAA8E,OAAAzN,GAAA0N,IAAAhP,KAAAiP,kBAAAC,KAAAlP,OACAA,KAAA6L,OAAAvK,MAAA,KAIAtB,KAAAsB,MAAAtB,KAAAiP,kBAAA3N,GACAtB,KAAA6L,OAAAvK,MAAAtB,KAAAmP,YAAA7N,IAEAwN,GACA9O,KAAA4L,gBAAA,GAGA5L,KAAA6L,OAAAG,UAMA/C,EAAA/I,UAAAoO,YAAA,SAAAhN,GACA,IAAAyG,EAAA/H,KAAAiK,OAAAmF,QAAA9N,IACA,IAAAyG,IACAA,IAAA/H,KAAAiK,OAAA5G,OAAA,EACArD,KAAAsB,MAAAtB,KAAAiK,OAAAoF,MAAA,MAAAL,IAAAhP,KAAAiP,kBAAAC,KAAAlP,OAGAA,KAAAsB,MAAAtB,KAAAiK,OAAAoF,MAAA,EAAAtH,GAAAgH,OAAA/O,KAAAiK,OAAAoF,MAAAtH,EAAA,IAAAiH,IAAAhP,KAAAiP,kBAAAC,KAAAlP,OAEAA,KAAA6K,kBAAAiB,KAAA9L,KAAA6L,OAAAvK,OACAtB,KAAA6L,OAAAG,UAGA/C,EAAA/I,UAAA0L,eAAA,SAAAtK,QACAuB,IAAAvB,GACAtB,KAAA6L,OAAAG,QACAhM,KAAA8J,YAAA9J,KAAA8J,YAGA9J,KAAA8J,WAAAxI,EAEAtB,KAAA+J,cAAA/J,KAAA8J,WAAA9J,KAAA8M,SAAApC,0BAAA1K,KAAA8M,SAAArC,mBAMAxB,EAAA/I,UAAA4N,WAAA,SAAAxM,GAKA,GAHAtB,KAAA0N,OAAApM,EACAtB,KAAAkJ,WAAAwC,cAAApK,QAEAtB,KAAAwJ,MACA,GAAAxJ,KAAAyJ,QAAA,CACA,IAAAkE,EAAA,WACA3N,KAAAiK,OAAA3I,IAAA0N,IAAAhP,KAAAsP,gBAAAJ,KAAAlP,UAEAA,KAAAiK,OAAAjK,KAAAiK,OAAAiD,OAAA,SAAAqC,GAAqE,QAAAA,KAErEvP,KAAAsN,aAAAhM,EACAqM,EAAAzM,MAAAlB,MAGAA,KAAAkK,cAAAvE,KAAAgI,QAIA3N,KAAAiK,OAAA3I,MAIA,mBAAAkO,SAAA,CACA,IAAAC,EAAAD,SAAAE,YAAA,cACAD,EAAAE,UAAA,gBACA3P,KAAAkJ,WAAAwC,cAAAkE,cAAAH,QAIAzP,KAAAkJ,WAAAwC,cAAAmE,UAAA,YAEA7P,KAAA+K,SAAAzJ,IAMA2H,EAAA/I,UAAA4P,iBAAA,SAAAxO,GACAtB,KAAA6J,WAAAvI,EACAtB,KAAAmJ,SAAA4G,YAAA/P,KAAAkJ,WAAAwC,cAAA,WAAApK,IAEA2H,EAAA/I,UAAA8P,iBAAA,SAAAC,GACAjQ,KAAA+K,SAAAkF,GAEAhH,EAAA/I,UAAAgQ,kBAAA,SAAAD,GACAjQ,KAAAiL,UAAAgF,GAMAhH,EAAA/I,UAAAiN,iBAAA,SAAAD,GACA,IAAAN,EAAA5M,KACA,gBAAAsB,GACA,OAAAsL,EAAA3C,OAAAiE,SAAA5M,KAGA,iBAAAA,EACAqH,EAAArH,GAAA4M,SAAAhB,GAGAvE,EAAArH,EAAAsL,EAAAvD,YAAA6E,SAAAhB,KACAN,EAAA3C,OAAAkG,KAAA,SAAAC,GAA2D,OAAAA,EAAAxD,EAAAtD,WAAAhI,EAAAsL,EAAAtD,cAS3DL,EAAA/I,UAAA6L,SAAA,SAAAzK,GACA,IAAA+O,EAAA,iBAAA/O,EAAAqH,EAAArH,GAAA,KACA,QAAA8M,KAAApO,KAAAgK,QAAA,CACA,oBAAAhK,KAAAgK,QAAAoE,IAEA,GADAzF,EAAA3I,KAAAgK,QAAAoE,MACAiC,EACA,cAIA,oBAAA/O,GAEA,GADAqH,EAAA3I,KAAAgK,QAAAoE,GAAApO,KAAAqJ,cACAgH,EACA,cAIA,GAAArQ,KAAAgK,QAAAoE,GAAApO,KAAAsJ,WAAAhI,EAAAtB,KAAAsJ,SACA,SAKA,UAOAL,EAAA/I,UAAA0N,gBAAA,SAAA0C,GACA,IAAAC,EAAAvQ,KAAAsP,gBAAAgB,GACA,OAAAC,EACAA,EAAAvQ,KAAAqJ,WAGA,IAQAJ,EAAA/I,UAAAoP,gBAAA,SAAAgB,GACA,QAAAlC,KAAApO,KAAAsN,WACA,GAAAtN,KAAAsN,WAAAc,GAAApO,KAAAsJ,WAAAgH,EACA,OAAAtQ,KAAAsN,WAAAc,GAGA,aAOAnF,EAAA/I,UAAA+O,kBAAA,SAAA3N,GACA,IAAAsL,EAAA5M,KACA,GAAAA,KAAAyJ,QAAA,CACA,oBAAAnI,EAAA,CACA,IAAAkP,EAAA7H,EAAArH,GACAiP,EAAAvQ,KAAAsN,WAAAmD,KAAA,SAAAC,GAAkE,OAAA/H,EAAA+H,EAAA9D,EAAAvD,cAAAmH,IAClE,GAAAD,EACA,OAAAA,EAAAvQ,KAAAsJ,SAEA,MAAAqH,MAAA,oDAEA,OAAArP,EAAAtB,KAAAsJ,SAEA,OAAAhI,GAOA2H,EAAA/I,UAAAiP,YAAA,SAAA7N,GACA,OAAAtB,KAAAyJ,SAAA,iBAAAnI,EACAA,EAAAtB,KAAAqJ,WAEA/H,GAEA2H,EAxfA,GA0fAA,EAAA2H,aACKzC,KAAA7F,EAAAuI,UAAAxM,OACL5B,SAAA,aACAqO,QAAA,8wBACAC,SAAA,siEACAC,YAA6BC,QAAAzI,EAAA0I,kBAAAC,YAAA7I,EAAA8I,WAAA,WAAiF,OAAAnI,IAA6BO,OAAA,QAI3IP,EAAAoI,eAAA,WAAiD,QAC5ClD,KAAA7F,EAAAgJ,WAAAV,aAAwCzC,KAAA7F,EAAAiJ,OAAAlN,MAAAiE,EAAAgJ,gBACxCnD,KAAA7F,EAAAkJ,UAAAZ,aAAuCzC,KAAA7F,EAAAiJ,OAAAlN,MAAAiE,EAAAkJ,gBAE5CvI,EAAAwI,gBACArI,cAAqB+E,KAAA7F,EAAAoJ,QACrBC,eAAsBxD,KAAA7F,EAAAoJ,QACtBrI,YAAmB8E,KAAA7F,EAAAoJ,QACnBpI,UAAiB6E,KAAA7F,EAAAoJ,QACjBnI,SAAgB4E,KAAA7F,EAAAoJ,QAChBlI,QAAe2E,KAAA7F,EAAAoJ,QACfjI,UAAiB0E,KAAA7F,EAAAoJ,QACjBhI,cAAqByE,KAAA7F,EAAAoJ,QACrB5E,WAAkBqB,KAAA7F,EAAAoJ,QAClBE,eAAsBzD,KAAA7F,EAAAuJ,YAAAxN,MAAA,iBACtByN,kBAAyB3D,KAAA7F,EAAAuJ,YAAAxN,MAAA,mBACzBsF,cAAqBwE,KAAA7F,EAAAyJ,SACrBxG,kBAAyB4C,KAAA7F,EAAA0J,aAAA3N,MAAA,0BAEzBgE,EAAAY,kFCpjBArE,EAAA,WAAA1E,UAAA+G,cCSA,SAAAhC,EAAAC,EAAAgC,EAAA/B,GACA,OAAAhF,OAAA8R,EAAA,EAAA9R,CAAA8E,EAAAC,EAAAgC,EAAA/B,EAAAhF,CAAAH,oECVA4E,EAAA,WAAA1E,UAAAkN,KCgCA,SAAA8E,GACA,OAAA/R,OAAAgS,EAAA,EAAAhS,CAAA+R,EAAA/R,CAAAH,2DCpCAoS,EAAA3S,EAAA,IAGAyI,EAAA,WAAAmE,GAAA+F,EAAA,sDCHAC,EAAA5S,EAAA,KAGAyI,EAAA,WAAAhI,UAAAkM,SAAAiG,EAAA,oCCFAlS,OAAAiI,eAAAC,EAAA,cAA8C/G,OAAA,IAC9C,IAAAgR,EAAA7S,EAAA,KACA6I,EAAA7I,EAAA,GACA8S,EAAA9S,EAAA,GACA+S,EAAA,WAGA,OAFA,aADA,GAKAA,EAAA5B,aACKzC,KAAA7F,EAAAmK,SAAApO,OACLqO,SAAAH,EAAAI,cACAC,cAAAN,EAAArJ,oBACAZ,SAAAiK,EAAArJ,wBAIAuJ,EAAAnB,eAAA,WAA8C,UAC9ChJ,EAAAmK,oDClBA,SAAAK,EAAAC,GACA,QAAAjT,KAAAiT,EAAAzK,EAAAvI,eAAAD,KAAAwI,EAAAxI,GAAAiT,EAAAjT,IAEAM,OAAAiI,eAAAC,EAAA,cAA8C/G,OAAA,IAC9CuR,EAAApT,EAAA,MACAoT,EAAApT,EAAA,mDCNAsT,EAAAtT,EAAA,KAGAyI,EAAA,WAAAhI,UAAA8S,qBAAAD,EAAA","file":"1.31f92275b5e0c2e47ec9.chunk.js","sourcesContent":["/** PURE_IMPORTS_START .._OuterSubscriber,.._util_subscribeToResult PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nexport function sample(notifier) {\n    return function (source) { return source.lift(new SampleOperator(notifier)); };\n}\nvar SampleOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function SampleOperator(notifier) {\n        this.notifier = notifier;\n    }\n    SampleOperator.prototype.call = function (subscriber, source) {\n        var sampleSubscriber = new SampleSubscriber(subscriber);\n        var subscription = source.subscribe(sampleSubscriber);\n        subscription.add(subscribeToResult(sampleSubscriber, this.notifier));\n        return subscription;\n    };\n    return SampleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SampleSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(SampleSubscriber, _super);\n    function SampleSubscriber() {\n        _super.apply(this, arguments);\n        this.hasValue = false;\n    }\n    SampleSubscriber.prototype._next = function (value) {\n        this.value = value;\n        this.hasValue = true;\n    };\n    SampleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.emitValue();\n    };\n    SampleSubscriber.prototype.notifyComplete = function () {\n        this.emitValue();\n    };\n    SampleSubscriber.prototype.emitValue = function () {\n        if (this.hasValue) {\n            this.hasValue = false;\n            this.destination.next(this.value);\n        }\n    };\n    return SampleSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=sample.js.map\n","/** PURE_IMPORTS_START .._Observable,.._util_tryCatch,.._util_isFunction,.._util_errorObject,.._Subscription PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Observable } from '../Observable';\nimport { tryCatch } from '../util/tryCatch';\nimport { isFunction } from '../util/isFunction';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nvar toString = Object.prototype.toString;\nfunction isNodeStyleEventEmitter(sourceObj) {\n    return !!sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';\n}\nfunction isJQueryStyleEventEmitter(sourceObj) {\n    return !!sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';\n}\nfunction isNodeList(sourceObj) {\n    return !!sourceObj && toString.call(sourceObj) === '[object NodeList]';\n}\nfunction isHTMLCollection(sourceObj) {\n    return !!sourceObj && toString.call(sourceObj) === '[object HTMLCollection]';\n}\nfunction isEventTarget(sourceObj) {\n    return !!sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport var FromEventObservable = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(FromEventObservable, _super);\n    function FromEventObservable(sourceObj, eventName, selector, options) {\n        _super.call(this);\n        this.sourceObj = sourceObj;\n        this.eventName = eventName;\n        this.selector = selector;\n        this.options = options;\n    }\n    /* tslint:enable:max-line-length */\n    /**\n     * Creates an Observable that emits events of a specific type coming from the\n     * given event target.\n     *\n     * <span class=\"informal\">Creates an Observable from DOM events, or Node.js\n     * EventEmitter events or others.</span>\n     *\n     * <img src=\"./img/fromEvent.png\" width=\"100%\">\n     *\n     * `fromEvent` accepts as a first argument event target, which is an object with methods\n     * for registering event handler functions. As a second argument it takes string that indicates\n     * type of event we want to listen for. `fromEvent` supports selected types of event targets,\n     * which are described in detail below. If your event target does not match any of the ones listed,\n     * you should use {@link fromEventPattern}, which can be used on arbitrary APIs.\n     * When it comes to APIs supported by `fromEvent`, their methods for adding and removing event\n     * handler functions have different names, but they all accept a string describing event type\n     * and function itself, which will be called whenever said event happens.\n     *\n     * Every time resulting Observable is subscribed, event handler function will be registered\n     * to event target on given event type. When that event fires, value\n     * passed as a first argument to registered function will be emitted by output Observable.\n     * When Observable is unsubscribed, function will be unregistered from event target.\n     *\n     * Note that if event target calls registered function with more than one argument, second\n     * and following arguments will not appear in resulting stream. In order to get access to them,\n     * you can pass to `fromEvent` optional project function, which will be called with all arguments\n     * passed to event handler. Output Observable will then emit value returned by project function,\n     * instead of the usual value.\n     *\n     * Remember that event targets listed below are checked via duck typing. It means that\n     * no matter what kind of object you have and no matter what environment you work in,\n     * you can safely use `fromEvent` on that object if it exposes described methods (provided\n     * of course they behave as was described above). So for example if Node.js library exposes\n     * event target which has the same method names as DOM EventTarget, `fromEvent` is still\n     * a good choice.\n     *\n     * If the API you use is more callback then event handler oriented (subscribed\n     * callback function fires only once and thus there is no need to manually\n     * unregister it), you should use {@link bindCallback} or {@link bindNodeCallback}\n     * instead.\n     *\n     * `fromEvent` supports following types of event targets:\n     *\n     * **DOM EventTarget**\n     *\n     * This is an object with `addEventListener` and `removeEventListener` methods.\n     *\n     * In the browser, `addEventListener` accepts - apart from event type string and event\n     * handler function arguments - optional third parameter, which is either an object or boolean,\n     * both used for additional configuration how and when passed function will be called. When\n     * `fromEvent` is used with event target of that type, you can provide this values\n     * as third parameter as well.\n     *\n     * **Node.js EventEmitter**\n     *\n     * An object with `addListener` and `removeListener` methods.\n     *\n     * **JQuery-style event target**\n     *\n     * An object with `on` and `off` methods\n     *\n     * **DOM NodeList**\n     *\n     * List of DOM Nodes, returned for example by `document.querySelectorAll` or `Node.childNodes`.\n     *\n     * Although this collection is not event target in itself, `fromEvent` will iterate over all Nodes\n     * it contains and install event handler function in every of them. When returned Observable\n     * is unsubscribed, function will be removed from all Nodes.\n     *\n     * **DOM HtmlCollection**\n     *\n     * Just as in case of NodeList it is a collection of DOM nodes. Here as well event handler function is\n     * installed and removed in each of elements.\n     *\n     *\n     * @example <caption>Emits clicks happening on the DOM document</caption>\n     * var clicks = Rx.Observable.fromEvent(document, 'click');\n     * clicks.subscribe(x => console.log(x));\n     *\n     * // Results in:\n     * // MouseEvent object logged to console every time a click\n     * // occurs on the document.\n     *\n     *\n     * @example <caption>Use addEventListener with capture option</caption>\n     * var clicksInDocument = Rx.Observable.fromEvent(document, 'click', true); // note optional configuration parameter\n     *                                                                          // which will be passed to addEventListener\n     * var clicksInDiv = Rx.Observable.fromEvent(someDivInDocument, 'click');\n     *\n     * clicksInDocument.subscribe(() => console.log('document'));\n     * clicksInDiv.subscribe(() => console.log('div'));\n     *\n     * // By default events bubble UP in DOM tree, so normally\n     * // when we would click on div in document\n     * // \"div\" would be logged first and then \"document\".\n     * // Since we specified optional `capture` option, document\n     * // will catch event when it goes DOWN DOM tree, so console\n     * // will log \"document\" and then \"div\".\n     *\n     * @see {@link bindCallback}\n     * @see {@link bindNodeCallback}\n     * @see {@link fromEventPattern}\n     *\n     * @param {EventTargetLike} target The DOM EventTarget, Node.js\n     * EventEmitter, JQuery-like event target, NodeList or HTMLCollection to attach the event handler to.\n     * @param {string} eventName The event name of interest, being emitted by the\n     * `target`.\n     * @param {EventListenerOptions} [options] Options to pass through to addEventListener\n     * @param {SelectorMethodSignature<T>} [selector] An optional function to\n     * post-process results. It takes the arguments from the event handler and\n     * should return a single value.\n     * @return {Observable<T>}\n     * @static true\n     * @name fromEvent\n     * @owner Observable\n     */\n    FromEventObservable.create = function (target, eventName, options, selector) {\n        if (isFunction(options)) {\n            selector = options;\n            options = undefined;\n        }\n        return new FromEventObservable(target, eventName, selector, options);\n    };\n    FromEventObservable.setupSubscription = function (sourceObj, eventName, handler, subscriber, options) {\n        var unsubscribe;\n        if (isNodeList(sourceObj) || isHTMLCollection(sourceObj)) {\n            for (var i = 0, len = sourceObj.length; i < len; i++) {\n                FromEventObservable.setupSubscription(sourceObj[i], eventName, handler, subscriber, options);\n            }\n        }\n        else if (isEventTarget(sourceObj)) {\n            var source_1 = sourceObj;\n            sourceObj.addEventListener(eventName, handler, options);\n            unsubscribe = function () { return source_1.removeEventListener(eventName, handler, options); };\n        }\n        else if (isJQueryStyleEventEmitter(sourceObj)) {\n            var source_2 = sourceObj;\n            sourceObj.on(eventName, handler);\n            unsubscribe = function () { return source_2.off(eventName, handler); };\n        }\n        else if (isNodeStyleEventEmitter(sourceObj)) {\n            var source_3 = sourceObj;\n            sourceObj.addListener(eventName, handler);\n            unsubscribe = function () { return source_3.removeListener(eventName, handler); };\n        }\n        else {\n            throw new TypeError('Invalid event target');\n        }\n        subscriber.add(new Subscription(unsubscribe));\n    };\n    /** @deprecated internal use only */ FromEventObservable.prototype._subscribe = function (subscriber) {\n        var sourceObj = this.sourceObj;\n        var eventName = this.eventName;\n        var options = this.options;\n        var selector = this.selector;\n        var handler = selector ? function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            var result = tryCatch(selector).apply(void 0, args);\n            if (result === errorObject) {\n                subscriber.error(errorObject.e);\n            }\n            else {\n                subscriber.next(result);\n            }\n        } : function (e) { return subscriber.next(e); };\n        FromEventObservable.setupSubscription(sourceObj, eventName, handler, subscriber, options);\n    };\n    return FromEventObservable;\n}(Observable));\n//# sourceMappingURL=FromEventObservable.js.map\n","/** PURE_IMPORTS_START ._FromEventObservable PURE_IMPORTS_END */\nimport { FromEventObservable } from './FromEventObservable';\nexport var fromEvent = FromEventObservable.create;\n//# sourceMappingURL=fromEvent.js.map\n","/** PURE_IMPORTS_START ._Subject,._scheduler_queue,._Subscription,._operators_observeOn,._util_ObjectUnsubscribedError,._SubjectSubscription PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subject } from './Subject';\nimport { queue } from './scheduler/queue';\nimport { Subscription } from './Subscription';\nimport { ObserveOnSubscriber } from './operators/observeOn';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\n/**\n * @class ReplaySubject<T>\n */\nexport var ReplaySubject = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(ReplaySubject, _super);\n    function ReplaySubject(bufferSize, windowTime, scheduler) {\n        if (bufferSize === void 0) {\n            bufferSize = Number.POSITIVE_INFINITY;\n        }\n        if (windowTime === void 0) {\n            windowTime = Number.POSITIVE_INFINITY;\n        }\n        _super.call(this);\n        this.scheduler = scheduler;\n        this._events = [];\n        this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n        this._windowTime = windowTime < 1 ? 1 : windowTime;\n    }\n    ReplaySubject.prototype.next = function (value) {\n        var now = this._getNow();\n        this._events.push(new ReplayEvent(now, value));\n        this._trimBufferThenGetEvents();\n        _super.prototype.next.call(this, value);\n    };\n    /** @deprecated internal use only */ ReplaySubject.prototype._subscribe = function (subscriber) {\n        var _events = this._trimBufferThenGetEvents();\n        var scheduler = this.scheduler;\n        var subscription;\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        else if (this.hasError) {\n            subscription = Subscription.EMPTY;\n        }\n        else if (this.isStopped) {\n            subscription = Subscription.EMPTY;\n        }\n        else {\n            this.observers.push(subscriber);\n            subscription = new SubjectSubscription(this, subscriber);\n        }\n        if (scheduler) {\n            subscriber.add(subscriber = new ObserveOnSubscriber(subscriber, scheduler));\n        }\n        var len = _events.length;\n        for (var i = 0; i < len && !subscriber.closed; i++) {\n            subscriber.next(_events[i].value);\n        }\n        if (this.hasError) {\n            subscriber.error(this.thrownError);\n        }\n        else if (this.isStopped) {\n            subscriber.complete();\n        }\n        return subscription;\n    };\n    ReplaySubject.prototype._getNow = function () {\n        return (this.scheduler || queue).now();\n    };\n    ReplaySubject.prototype._trimBufferThenGetEvents = function () {\n        var now = this._getNow();\n        var _bufferSize = this._bufferSize;\n        var _windowTime = this._windowTime;\n        var _events = this._events;\n        var eventsCount = _events.length;\n        var spliceCount = 0;\n        // Trim events that fall out of the time window.\n        // Start at the front of the list. Break early once\n        // we encounter an event that falls within the window.\n        while (spliceCount < eventsCount) {\n            if ((now - _events[spliceCount].time) < _windowTime) {\n                break;\n            }\n            spliceCount++;\n        }\n        if (eventsCount > _bufferSize) {\n            spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n        }\n        if (spliceCount > 0) {\n            _events.splice(0, spliceCount);\n        }\n        return _events;\n    };\n    return ReplaySubject;\n}(Subject));\nvar ReplayEvent = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function ReplayEvent(time, value) {\n        this.time = time;\n        this.value = value;\n    }\n    return ReplayEvent;\n}());\n//# sourceMappingURL=ReplaySubject.js.map\n","/** PURE_IMPORTS_START .._ReplaySubject,._multicast PURE_IMPORTS_END */\nimport { ReplaySubject } from '../ReplaySubject';\nimport { multicast } from './multicast';\n/* tslint:enable:max-line-length */\nexport function publishReplay(bufferSize, windowTime, selectorOrScheduler, scheduler) {\n    if (selectorOrScheduler && typeof selectorOrScheduler !== 'function') {\n        scheduler = selectorOrScheduler;\n    }\n    var selector = typeof selectorOrScheduler === 'function' ? selectorOrScheduler : undefined;\n    var subject = new ReplaySubject(bufferSize, windowTime, scheduler);\n    return function (source) { return multicast(function () { return subject; }, selector)(source); };\n}\n//# sourceMappingURL=publishReplay.js.map\n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_sample PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { sample } from '../../operator/sample';\nObservable.prototype.sample = sample;\n//# sourceMappingURL=sample.js.map\n","/** PURE_IMPORTS_START .._operators_sample PURE_IMPORTS_END */\nimport { sample as higherOrder } from '../operators/sample';\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nexport function sample(notifier) {\n    return higherOrder(notifier)(this);\n}\n//# sourceMappingURL=sample.js.map\n","/** PURE_IMPORTS_START .._util_isNumeric,.._Observable,.._scheduler_async PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { isNumeric } from '../util/isNumeric';\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport var IntervalObservable = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(IntervalObservable, _super);\n    function IntervalObservable(period, scheduler) {\n        if (period === void 0) {\n            period = 0;\n        }\n        if (scheduler === void 0) {\n            scheduler = async;\n        }\n        _super.call(this);\n        this.period = period;\n        this.scheduler = scheduler;\n        if (!isNumeric(period) || period < 0) {\n            this.period = 0;\n        }\n        if (!scheduler || typeof scheduler.schedule !== 'function') {\n            this.scheduler = async;\n        }\n    }\n    /**\n     * Creates an Observable that emits sequential numbers every specified\n     * interval of time, on a specified IScheduler.\n     *\n     * <span class=\"informal\">Emits incremental numbers periodically in time.\n     * </span>\n     *\n     * <img src=\"./img/interval.png\" width=\"100%\">\n     *\n     * `interval` returns an Observable that emits an infinite sequence of\n     * ascending integers, with a constant interval of time of your choosing\n     * between those emissions. The first emission is not sent immediately, but\n     * only after the first period has passed. By default, this operator uses the\n     * `async` IScheduler to provide a notion of time, but you may pass any\n     * IScheduler to it.\n     *\n     * @example <caption>Emits ascending numbers, one every second (1000ms)</caption>\n     * var numbers = Rx.Observable.interval(1000);\n     * numbers.subscribe(x => console.log(x));\n     *\n     * @see {@link timer}\n     * @see {@link delay}\n     *\n     * @param {number} [period=0] The interval size in milliseconds (by default)\n     * or the time unit determined by the scheduler's clock.\n     * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n     * the emission of values, and providing a notion of \"time\".\n     * @return {Observable} An Observable that emits a sequential number each time\n     * interval.\n     * @static true\n     * @name interval\n     * @owner Observable\n     */\n    IntervalObservable.create = function (period, scheduler) {\n        if (period === void 0) {\n            period = 0;\n        }\n        if (scheduler === void 0) {\n            scheduler = async;\n        }\n        return new IntervalObservable(period, scheduler);\n    };\n    IntervalObservable.dispatch = function (state) {\n        var index = state.index, subscriber = state.subscriber, period = state.period;\n        subscriber.next(index);\n        if (subscriber.closed) {\n            return;\n        }\n        state.index += 1;\n        this.schedule(state, period);\n    };\n    /** @deprecated internal use only */ IntervalObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var period = this.period;\n        var scheduler = this.scheduler;\n        subscriber.add(scheduler.schedule(IntervalObservable.dispatch, period, {\n            index: index, subscriber: subscriber, period: period\n        }));\n    };\n    return IntervalObservable;\n}(Observable));\n//# sourceMappingURL=IntervalObservable.js.map\n","/** PURE_IMPORTS_START ._IntervalObservable PURE_IMPORTS_END */\nimport { IntervalObservable } from './IntervalObservable';\nexport var interval = IntervalObservable.create;\n//# sourceMappingURL=interval.js.map\n","/** PURE_IMPORTS_START .._.._Observable,.._.._observable_interval PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { interval as staticInterval } from '../../observable/interval';\nObservable.interval = staticInterval;\n//# sourceMappingURL=interval.js.map\n","/** PURE_IMPORTS_START .._.._Observable,.._.._observable_fromEvent PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { fromEvent as staticFromEvent } from '../../observable/fromEvent';\nObservable.fromEvent = staticFromEvent;\n//# sourceMappingURL=fromEvent.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar Observable_1 = require(\"rxjs/Observable\");\nrequire(\"rxjs/add/operator/debounceTime\");\nrequire(\"rxjs/add/operator/mergeMap\");\nrequire(\"rxjs/add/operator/take\");\nrequire(\"rxjs/add/operator/toArray\");\nrequire(\"rxjs/add/operator/filter\");\nrequire(\"rxjs/add/operator/mergeAll\");\nrequire(\"rxjs/add/operator/publishReplay\");\nrequire(\"rxjs/add/observable/of\");\nvar forms_1 = require(\"@angular/forms\");\nvar KEY_UP = 'keyup';\nvar KEY_DOWN = 'keydown';\nvar ARROW_DOWN = 'ArrowDown';\nvar ARROW_UP = 'ArrowUp';\nvar ESCAPE = 'Escape';\nvar ENTER = 'Enter';\nvar BACKSPACE = 'Backspace';\n/**\n * Sanitize string for string comparison\n * @param {string} text\n */\nvar sanitizeString = function (text) {\n    return text.toLowerCase().normalize('NFD').replace(/[\\u0300-\\u036f]/g, '').trim();\n};\n/***\n * Usage:\n *\n * <typeahead formControlName=\"myControlName\" [suggestions]=\"['abc', 'def',...]\"></typeahead>\n * <typeahead formControlName=\"myControlName\" [suggestions]=\"Observable.of(['abc', 'def',...])\"></typeahead>\n */\nvar TypeaheadComponent = (function () {\n    /**\n     * CTOR\n     * @param elementRef\n     * @param renderer\n     */\n    function TypeaheadComponent(elementRef, renderer) {\n        this.elementRef = elementRef;\n        this.renderer = renderer;\n        /** suggestions list - array of strings, objects or Observable */\n        this.suggestions = [];\n        /** field to use from objects as name */\n        this.nameField = 'name';\n        /** field to use from objects as id */\n        this.idField = 'id';\n        /** allow custom values */\n        this.custom = true;\n        /** allow multiple values */\n        this.multi = false;\n        /** use complex suggestions and results */\n        this.complex = false;\n        /** use complex suggestions and results */\n        this.placeholder = '';\n        /** Output value change */\n        this.valueChange = new core_1.EventEmitter();\n        // ui state\n        this.isDisabled = false;\n        this.isExpanded = false;\n        this.dropDownClass = '';\n        this.matches = [];\n        // values\n        this.values = [];\n        this.callbackQueue = [];\n        /**\n         * Default values for TypeaheadSettings\n         * @type TypeaheadSettings\n         * @private\n         */\n        this._settings = {\n            suggestionsLimit: 10,\n            typeDelay: 50,\n            noMatchesText: 'No matches found',\n            tagClass: 'btn badge badge-primary',\n            tagRemoveIconClass: '',\n            dropdownMenuClass: 'dropdown-menu',\n            dropdownMenuExpandedClass: 'dropdown-menu show',\n            dropdownMenuItemClass: 'dropdown-item',\n            dropdownToggleClass: 'dropdown-toggle'\n        };\n        this._inputChangeEvent = new core_1.EventEmitter();\n        this._removeInProgress = false;\n        this.onChange = function (_) { };\n        this.onTouched = function () { };\n    }\n    Object.defineProperty(TypeaheadComponent.prototype, \"settings\", {\n        get: function () {\n            return this._settings;\n        },\n        /** Value of form control */\n        set: function (value) {\n            Object.assign(this._settings, value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TypeaheadComponent.prototype, \"multiBinding\", {\n        /** UI Bindings */\n        get: function () { return this.multi; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TypeaheadComponent.prototype, \"disabledBinding\", {\n        get: function () { return this.isDisabled || null; },\n        enumerable: true,\n        configurable: true\n    });\n    TypeaheadComponent.prototype.focusOutHandler = function (event) {\n        if (this.isDisabled) {\n            return;\n        }\n        if (event.relatedTarget) {\n            // related target is typeahead, input or one of the buttons\n            if (event.relatedTarget === this.elementRef.nativeElement ||\n                event.relatedTarget.parentElement === this.elementRef.nativeElement ||\n                event.relatedTarget.parentElement.parentElement === this.elementRef.nativeElement) {\n                // grab back input focus after button click since `focus out` cancelled it\n                if (event.target === this._input && event.relatedTarget === this.elementRef.nativeElement) {\n                    this._input.focus();\n                }\n                return;\n            }\n        }\n        // close dropdown\n        this.toggleDropdown(false);\n        // keep just approved tags\n        if (this.multi) {\n            this._input.value = null;\n            this._inputChangeEvent.emit('');\n            return;\n        }\n        // trim values\n        if (!this.custom || this.complex) {\n            this._input.value = this._input.value.trim();\n            // if not match then cleanup the values\n            if (!this.hasMatch(this._input.value)) {\n                this._input.value = this.value = null;\n                this._inputChangeEvent.emit('');\n            }\n        }\n    };\n    /**\n     * On component initialization\n     */\n    TypeaheadComponent.prototype.ngOnInit = function () {\n        this.suggestionsInit(this.suggestions instanceof Observable_1.Observable ?\n            this.suggestions\n                .publishReplay(1)\n                .refCount()\n                .mergeAll() : Observable_1.Observable\n            .of.apply(Observable_1.Observable, this.suggestions));\n        this.toggleDropdown(false);\n        this._inputChangeEvent.emit('');\n    };\n    TypeaheadComponent.prototype.ngOnChanges = function (changes) {\n        if (changes.suggestions && !changes.suggestions.firstChange) {\n            this.allMatchesSubscription.unsubscribe();\n            this.matchesSubscription.unsubscribe();\n            this.ngOnInit();\n        }\n    };\n    TypeaheadComponent.prototype.suggestionsInit = function (suggestion$) {\n        var _this = this;\n        this.matchesSubscription = this._inputChangeEvent\n            .debounceTime(this.settings.typeDelay)\n            .mergeMap(function (value) {\n            var normalizedValue = sanitizeString(value);\n            var filteredSuggestions$ = suggestion$.filter(_this.filterSuggestion(normalizedValue));\n            return _this.settings.suggestionsLimit ?\n                filteredSuggestions$.take(_this.settings.suggestionsLimit).toArray() :\n                filteredSuggestions$.toArray();\n        })\n            .subscribe(function (matches) {\n            _this.matches = matches;\n        });\n        this.allMatchesSubscription = suggestion$.toArray().subscribe(function (suggestions) {\n            _this.allMatches = suggestions;\n            while (_this.callbackQueue.length) {\n                // take first one and process it\n                _this.callbackQueue.shift().apply(_this);\n                _this._inputChangeEvent.emit('');\n            }\n        });\n    };\n    /**\n     * Init method\n     */\n    TypeaheadComponent.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        // set value to input\n        this._input = this.elementRef.nativeElement.querySelector('input');\n        if (!this.multi && this._value) {\n            var callback = function () {\n                _this._input.value = _this.complex ?\n                    _this.extractNameById(_this._value) :\n                    _this._value;\n            };\n            if (this.allMatches || !this.complex) {\n                callback.apply(this);\n            }\n            else {\n                this.callbackQueue.push(callback);\n            }\n        }\n    };\n    /**\n     * Cleanup timeout\n     */\n    TypeaheadComponent.prototype.ngOnDestroy = function () {\n        this.allMatchesSubscription.unsubscribe();\n        this.matchesSubscription.unsubscribe();\n    };\n    Object.defineProperty(TypeaheadComponent.prototype, \"value\", {\n        /**\n         * Value getter\n         * @returns {string|string[]}\n         */\n        get: function () {\n            return this._value;\n        },\n        /**\n         * Value setter\n         * @param value\n         */\n        set: function (value) {\n            if (value === this._value) {\n                return;\n            }\n            this.writeValue(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Handle input change event\n     * @param {Event} event\n     */\n    TypeaheadComponent.prototype.handleInputChange = function (event) {\n        // Stop the propagation of event up the DOM tree in case\n        // `change` event handler is attached to host component.\n        event.stopPropagation();\n    };\n    /**\n     * Update value on input change\n     * @param event\n     */\n    TypeaheadComponent.prototype.handleInput = function (event) {\n        var target = event.target;\n        // if esc key, close dropdown\n        if ([KEY_DOWN, KEY_UP].includes(event.type) && event.key === ESCAPE) {\n            this.toggleDropdown(false);\n            return;\n        }\n        // if arrow down, select first item in the menu\n        if (event.type === KEY_DOWN && event.key === ARROW_DOWN && this.matches.length > 0) {\n            var button = this.elementRef.nativeElement.querySelector('button[role=\"menuitem\"]:first-child');\n            button.focus();\n            return;\n        }\n        this.toggleDropdown(true);\n        if (this.multi || this.complex) {\n            if (event.type === KEY_UP && event.key === ENTER && target.value !== '') {\n                this.setValue(target.value);\n                this.toggleDropdown(false);\n            }\n            if ([KEY_DOWN, KEY_UP].includes(event.type) && event.key === BACKSPACE) {\n                if (target.value === '') {\n                    if (event.type === KEY_DOWN) {\n                        this._removeInProgress = true;\n                    }\n                    else if (this._removeInProgress) {\n                        if (this.multi && this.values.length) {\n                            this._removeInProgress = false;\n                            this.removeValue(this.values[this.values.length - 1]);\n                        }\n                    }\n                }\n                else if (this.complex && !this.multi && event.type === KEY_DOWN) {\n                    this.value = null;\n                }\n            }\n        }\n        else if (event.type === KEY_UP) {\n            this.setValue(target.value);\n            if (event.key === ENTER && target.value !== '') {\n                this.toggleDropdown(false);\n            }\n        }\n        this._inputChangeEvent.emit(target.value);\n    };\n    /**\n     * Move through collection on dropdown\n     * @param event\n     * @param value\n     */\n    TypeaheadComponent.prototype.handleButton = function (event, value) {\n        var target = event.target;\n        if (event instanceof MouseEvent) {\n            this.setValue(value, true);\n            this._inputChangeEvent.emit(this._input.value);\n            return;\n        }\n        if (event.type === KEY_UP) {\n            if (event.key === ENTER) {\n                this.setValue(value);\n                this._inputChangeEvent.emit(this._input.value);\n                this.toggleDropdown(false);\n            }\n            if (event.key === ESCAPE) {\n                this._input.focus();\n                this.toggleDropdown(false);\n            }\n        }\n        else {\n            if (event.key === ARROW_DOWN && target.nextElementSibling) {\n                target.nextElementSibling.focus();\n            }\n            if (event.key === ARROW_UP && target.previousElementSibling) {\n                target.previousElementSibling.focus();\n            }\n            target.parentNode.scrollTop = target.offsetTop;\n        }\n    };\n    /**\n     * Set value to list of values or as a single value\n     * @param value\n     * @param {boolean} collapseMenu\n     */\n    TypeaheadComponent.prototype.setValue = function (value, collapseMenu) {\n        if ((!this.custom || this.complex) && !this.hasMatch(value)) {\n            return;\n        }\n        if (this.multi) {\n            if (!this.values.includes(value)) {\n                this.value = this.values.concat(value).map(this.extractIdentifier.bind(this));\n                this._input.value = '';\n            }\n        }\n        else {\n            this.value = this.extractIdentifier(value);\n            this._input.value = this.extractName(value);\n        }\n        if (collapseMenu) {\n            this.toggleDropdown(false);\n        }\n        // refocus the input\n        this._input.focus();\n    };\n    /**\n     * Remove value from list of values or clear out the value\n     * @param value\n     */\n    TypeaheadComponent.prototype.removeValue = function (value) {\n        var index = this.values.indexOf(value);\n        if (index !== -1) {\n            if (index === this.values.length - 1) {\n                this.value = this.values.slice(0, -1).map(this.extractIdentifier.bind(this));\n            }\n            else {\n                this.value = this.values.slice(0, index).concat(this.values.slice(index + 1)).map(this.extractIdentifier.bind(this));\n            }\n            this._inputChangeEvent.emit(this._input.value);\n            this._input.focus();\n        }\n    };\n    TypeaheadComponent.prototype.toggleDropdown = function (value) {\n        if (value === undefined) {\n            this._input.focus();\n            this.isExpanded = !this.isExpanded;\n        }\n        else {\n            this.isExpanded = value;\n        }\n        this.dropDownClass = this.isExpanded ? this.settings.dropdownMenuExpandedClass : this.settings.dropdownMenuClass;\n    };\n    /**\n     * Write new value\n     * @param value\n     */\n    TypeaheadComponent.prototype.writeValue = function (value) {\n        // set value\n        this._value = value;\n        this.elementRef.nativeElement.value = value;\n        // modify values list\n        if (this.multi) {\n            if (this.complex) {\n                var callback = function () {\n                    this.values = value ? value.map(this.parseObjectById.bind(this)) : [];\n                    // make sure not found value doesn't break the UI\n                    this.values = this.values.filter(function (val) { return !!val; });\n                };\n                if (this.allMatches || !value) {\n                    callback.apply(this);\n                }\n                else {\n                    this.callbackQueue.push(callback);\n                }\n            }\n            else {\n                this.values = value || [];\n            }\n        }\n        // trigger change\n        if ('createEvent' in document) {\n            var event_1 = document.createEvent('HTMLEvents');\n            event_1.initEvent('change', false, true);\n            this.elementRef.nativeElement.dispatchEvent(event_1);\n        }\n        else {\n            // we need to cast since fireEvent is not standard functionality and works only in IE\n            this.elementRef.nativeElement.fireEvent('onchange');\n        }\n        this.onChange(value);\n    };\n    /**\n     * Set disabled state of the component\n     * @param {boolean} value\n     */\n    TypeaheadComponent.prototype.setDisabledState = function (value) {\n        this.isDisabled = value;\n        this.renderer.setProperty(this.elementRef.nativeElement, 'disabled', value);\n    };\n    TypeaheadComponent.prototype.registerOnChange = function (fn) {\n        this.onChange = fn;\n    };\n    TypeaheadComponent.prototype.registerOnTouched = function (fn) {\n        this.onTouched = fn;\n    };\n    /**\n     * @param {string} filter\n     * @returns {(value: any) => boolean}\n     */\n    TypeaheadComponent.prototype.filterSuggestion = function (filter) {\n        var _this = this;\n        return function (value) {\n            if (_this.values.includes(value)) {\n                return false;\n            }\n            if (typeof value === 'string') {\n                return sanitizeString(value).includes(filter);\n            }\n            else {\n                return sanitizeString(value[_this.nameField]).includes(filter) &&\n                    !_this.values.some(function (element) { return element[_this.idField] === value[_this.idField]; });\n            }\n        };\n    };\n    /**\n     * Check if value has match\n     * @param {string | Object} value\n     * @returns {boolean}\n     */\n    TypeaheadComponent.prototype.hasMatch = function (value) {\n        var sanitizedValue = typeof value === 'string' ? sanitizeString(value) : null;\n        for (var key in this.matches) {\n            if (typeof this.matches[key] === 'string') {\n                var sanitizedMatch = sanitizeString(this.matches[key]);\n                if (sanitizedMatch === sanitizedValue) {\n                    return true;\n                }\n            }\n            else {\n                if (typeof value === 'string') {\n                    var sanitizedMatch = sanitizeString(this.matches[key][this.nameField]);\n                    if (sanitizedMatch === sanitizedValue) {\n                        return true;\n                    }\n                }\n                else {\n                    if (this.matches[key][this.idField] === value[this.idField]) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    };\n    /**\n     * Get name by parsing id into object\n     * @param id\n     * @returns {string}\n     */\n    TypeaheadComponent.prototype.extractNameById = function (id) {\n        var match = this.parseObjectById(id);\n        if (match) {\n            return match[this.nameField];\n        }\n        else {\n            return '';\n        }\n    };\n    /**\n     * Get complex object from id\n     * @param id\n     * @returns {any}\n     */\n    TypeaheadComponent.prototype.parseObjectById = function (id) {\n        for (var key in this.allMatches) {\n            if (this.allMatches[key][this.idField] === id) {\n                return this.allMatches[key];\n            }\n        }\n        return null;\n    };\n    /**\n     * Extract id field from the complex object by name or return value if it's string\n     * @param {string | Object} value\n     * @returns {any}\n     */\n    TypeaheadComponent.prototype.extractIdentifier = function (value) {\n        var _this = this;\n        if (this.complex) {\n            if (typeof value === 'string') {\n                var sanitizedValue_1 = sanitizeString(value);\n                var match = this.allMatches.find(function (item) { return sanitizeString(item[_this.nameField]) === sanitizedValue_1; });\n                if (match) {\n                    return match[this.idField];\n                }\n                throw Error('Critical error: Match ID could not be extracted.');\n            }\n            return value[this.idField];\n        }\n        return value;\n    };\n    /**\n     * Extract name from complex object or return value if it's string\n     * @param {string | Object} value\n     * @returns {any}\n     */\n    TypeaheadComponent.prototype.extractName = function (value) {\n        if (this.complex && typeof value !== 'string') {\n            return value[this.nameField];\n        }\n        return value;\n    };\n    return TypeaheadComponent;\n}());\nTypeaheadComponent.decorators = [\n    { type: core_1.Component, args: [{\n                selector: 'type-ahead',\n                styles: [\"\\n    :host {\\n      height: auto;\\n      min-height: 1em;\\n      position: relative;\\n      display: inline-flex;\\n      flex-wrap: wrap;\\n      -webkit-appearance: textfield;\\n      -moz-appearance: textfield-multiline;\\n      -webkit-rtl-ordering: logical;\\n      user-select: text;\\n      cursor: auto;\\n    }\\n    :host[disabled] {\\n      cursor: not-allowed;\\n    }\\n    :host[disabled] input {\\n      background-color: inherit;\\n    }\\n    :host .type-ahead-badge {\\n      white-space: nowrap;\\n      cursor: pointer;\\n    }\\n    :host input {\\n      border: none;\\n      outline: 0;\\n      line-height: 1;\\n      flex: 1;\\n    }\\n    :host [role=\\\"menuitem\\\"] {\\n      cursor: pointer;\\n    }\\n    :host [role=\\\"menuitem\\\"][disabled] {\\n      cursor: not-allowed;\\n    }\\n  \"],\n                template: \"\\n    <!-- default options item template -->\\n    <ng-template #taItemTemplate let-value=\\\"item\\\">\\n      {{ complex ? value[nameField] : value }}\\n    </ng-template>\\n\\n    <span [ngClass]=\\\"settings.tagClass\\\" class=\\\"type-ahead-badge\\\" *ngFor=\\\"let value of values; let i = index\\\">\\n      <ng-template [ngTemplateOutlet]=\\\"itemTemplate || taItemTemplate\\\"\\n                 [ngTemplateOutletContext]=\\\"{ item: value, index: i, complex: complex, nameField: nameField }\\\"></ng-template>\\n      <span *ngIf=\\\"!isDisabled\\\" aria-hidden=\\\"true\\\" (click)=\\\"removeValue(value)\\\"\\n            [ngClass]=\\\"settings.tagRemoveIconClass\\\">\\u00D7</span>\\n    </span>\\n    <input *ngIf=\\\"!isDisabled || !multi || !values.length\\\" \\n           [disabled]=\\\"isDisabled || null\\\"\\n           placeholder=\\\"{{(isDisabled || values.length) ? '' : placeholder}}\\\"\\n           type=\\\"text\\\" autocomplete=\\\"off\\\"\\n           (keyup)=\\\"handleInput($event)\\\"\\n           (keydown)=\\\"handleInput($event)\\\"\\n           (paste)=\\\"handleInput($event)\\\"\\n           (click)=\\\"toggleDropdown(true)\\\"\\n           (change)=\\\"handleInputChange($event)\\\">\\n    <i *ngIf=\\\"!isDisabled\\\" (click)=\\\"toggleDropdown()\\\" tabindex=\\\"-1\\\"\\n       [ngClass]=\\\"settings.dropdownToggleClass\\\"></i>\\n    <div role=\\\"menu\\\" [attr.class]=\\\"dropDownClass\\\" *ngIf=\\\"matches.length || !custom\\\">\\n      <button *ngFor=\\\"let match of matches; let i = index\\\" type=\\\"button\\\" role=\\\"menuitem\\\" tabindex=\\\"-1\\\"\\n              [ngClass]=\\\"settings.dropdownMenuItemClass\\\"\\n              (mouseup)=\\\"handleButton($event, match)\\\"\\n              (keydown)=\\\"handleButton($event, match)\\\"\\n              (keyup)=\\\"handleButton($event, match)\\\">\\n        <ng-template [ngTemplateOutlet]=\\\"itemTemplate || taItemTemplate\\\"\\n                     [ngTemplateOutletContext]=\\\"{ item: match, index: i, complex: complex, nameField: nameField }\\\"></ng-template>\\n      </button>\\n      <div role=\\\"menuitem\\\" *ngIf=\\\"!matches.length && !custom\\\" tabindex=\\\"-1\\\" aria-disabled=\\\"true\\\" disabled=\\\"true\\\"\\n           [ngClass]=\\\"settings.dropdownMenuItemClass\\\">\\n        {{ settings.noMatchesText }}\\n      </div>\\n    </div>\\n  \",\n                providers: [{ provide: forms_1.NG_VALUE_ACCESSOR, useExisting: core_1.forwardRef(function () { return TypeaheadComponent; }), multi: true }]\n            },] },\n];\n/** @nocollapse */\nTypeaheadComponent.ctorParameters = function () { return [\n    { type: core_1.ElementRef, decorators: [{ type: core_1.Inject, args: [core_1.ElementRef,] },] },\n    { type: core_1.Renderer2, decorators: [{ type: core_1.Inject, args: [core_1.Renderer2,] },] },\n]; };\nTypeaheadComponent.propDecorators = {\n    'suggestions': [{ type: core_1.Input },],\n    'itemTemplate': [{ type: core_1.Input },],\n    'nameField': [{ type: core_1.Input },],\n    'idField': [{ type: core_1.Input },],\n    'custom': [{ type: core_1.Input },],\n    'multi': [{ type: core_1.Input },],\n    'complex': [{ type: core_1.Input },],\n    'placeholder': [{ type: core_1.Input },],\n    'settings': [{ type: core_1.Input },],\n    'multiBinding': [{ type: core_1.HostBinding, args: ['class.multi',] },],\n    'disabledBinding': [{ type: core_1.HostBinding, args: ['attr.disabled',] },],\n    'valueChange': [{ type: core_1.Output },],\n    'focusOutHandler': [{ type: core_1.HostListener, args: ['focusout', ['$event'],] },],\n};\nexports.TypeaheadComponent = TypeaheadComponent;\n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_publishReplay PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { publishReplay } from '../../operator/publishReplay';\nObservable.prototype.publishReplay = publishReplay;\n//# sourceMappingURL=publishReplay.js.map\n","/** PURE_IMPORTS_START .._operators_publishReplay PURE_IMPORTS_END */\nimport { publishReplay as higherOrder } from '../operators/publishReplay';\n/* tslint:enable:max-line-length */\n/**\n * @param bufferSize\n * @param windowTime\n * @param selectorOrScheduler\n * @param scheduler\n * @return {Observable<T> | ConnectableObservable<T>}\n * @method publishReplay\n * @owner Observable\n */\nexport function publishReplay(bufferSize, windowTime, selectorOrScheduler, scheduler) {\n    return higherOrder(bufferSize, windowTime, selectorOrScheduler, scheduler)(this);\n}\n//# sourceMappingURL=publishReplay.js.map\n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_take PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { take } from '../../operator/take';\nObservable.prototype.take = take;\n//# sourceMappingURL=take.js.map\n","/** PURE_IMPORTS_START .._operators_take PURE_IMPORTS_END */\nimport { take as higherOrder } from '../operators/take';\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take(count) {\n    return higherOrder(count)(this);\n}\n//# sourceMappingURL=take.js.map\n","/** PURE_IMPORTS_START .._.._Observable,.._.._observable_of PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { of as staticOf } from '../../observable/of';\nObservable.of = staticOf;\n//# sourceMappingURL=of.js.map\n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_mergeAll PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { mergeAll } from '../../operator/mergeAll';\nObservable.prototype.mergeAll = mergeAll;\n//# sourceMappingURL=mergeAll.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar typeahead_component_1 = require(\"./typeahead.component\");\nvar core_1 = require(\"@angular/core\");\nvar common_1 = require(\"@angular/common\");\nvar TypeaheadModule = (function () {\n    function TypeaheadModule() {\n    }\n    return TypeaheadModule;\n}());\nTypeaheadModule.decorators = [\n    { type: core_1.NgModule, args: [{\n                imports: [common_1.CommonModule],\n                declarations: [typeahead_component_1.TypeaheadComponent],\n                exports: [typeahead_component_1.TypeaheadComponent]\n            },] },\n];\n/** @nocollapse */\nTypeaheadModule.ctorParameters = function () { return []; };\nexports.TypeaheadModule = TypeaheadModule;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./src/typeahead.module\"));\n__export(require(\"./src/typeahead.component\"));\n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_distinctUntilChanged PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { distinctUntilChanged } from '../../operator/distinctUntilChanged';\nObservable.prototype.distinctUntilChanged = distinctUntilChanged;\n//# sourceMappingURL=distinctUntilChanged.js.map\n"],"sourceRoot":"webpack:///"}